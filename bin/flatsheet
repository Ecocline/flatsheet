#!/usr/bin/env node

var Sheets = require('../models/sheets');

var fs = require('fs');
var level = require('level-party');
var sublevel = require('subleveldown');
var minimist = require('minimist');
var JSONStream = require('JSONStream');
var accountdown = require('accountdown');
var randomColor = require('random-color');
var through = require('through2');
var prompt = require('prompt');

var argv = minimist(process.argv.slice(2));
var sheets = new Sheets();
var cmd = argv._[0];
var sub = argv._[1];

var db = level('./data/db');

var accounts = accountdown(sublevel(db, 'accounts'), {
  login: { basic: require('accountdown-basic') },
  keyEncoding: 'buffer',
  valueEncoding: 'json'
});

var sheets = Sheets(sublevel(db, 'sheets', {
  valueEncoding: 'json'
}));

if (cmd === 'account') return account();
else if (cmd === 'sheet') return sheet();

function account () {
  if (sub === 'create-admin') {
    var properties = [
      { name: 'email' },
      { name: 'username', },
      { name: 'password', hidden: true }
    ];

    prompt.start();
    prompt.get(properties, function (err, result) {

      var opts = {
        login: {
          basic: {
            username: result.username,
            password: result.password
          }
        },
        value: {
          admin: true,
          email: result.email,
          username: result.username,
          color: randomColor()
        }
      };

      accounts.create(result.username, opts, function (err) {

        //todo: notification of error
        if (err) console.error(err);
        db.close();
      });
    });

  }

  if (sub === 'list') {
    var l = accounts.list();
    l.on('data', console.log);
    l.on('end', function () { db.close(); });
  }

  if (sub === 'delete-all') {
    accounts.list().pipe(through.obj(write, end));

    function write (account, enc, next) {
      accounts.remove(account.key, function (err) {
        if (err) return console.error('something went wrong');
        console.log(account.key + ' removed');
        next();
      });
    }

    function end () {
      db.close();
      console.log('All accounts deleted.');
    }
  }
}

function sheet () {
  if (sub === 'add') {
    var file = fs.readFileSync(argv._[2], 'utf8');

    sheets.create(JSON.parse(file), function (err) {
      if (err) return console.log(err);
      db.close();
    });
  }

  if (sub === 'list') {
    var l = sheets.list();
    l.on('data', console.log);
    l.on('end', function () { db.close(); });
  }

  if (sub === 'fix-ids') {
    sheets.list({ keys:true, values:true }, function (err, results) {
      results.forEach(function (sheet) {
        sheet.value.id = sheet.key;
        sheets.update(sheet.key, sheet.value, function (err) {
          if (err) throw err;
        });
      });
    });
  }
  
  if (sub === 'delete-all') {
    sheets.list({ keys:true, values:true }, function (err, results) {
      results.forEach(function (sheet) {
        sheets.destroy(sheet.key, function () {
          console.log('destroyed ' + sheet.key);
        });
      });
      db.close();
    });
  }

  if (sub === 'delete') {
    sheets.destroy(argv._[2], function () {
      console.log('sheet deleted.');
      db.close();
    });
  }
}
